import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from tqdm import tqdm
import re
import math

# Налаштування стилю Seaborn для більш привабливих графіків
sns.set(style="whitegrid")

# 1. Підготовка Даних Про Площу Країн Світу

country_areas_data = """
1	Євразія	Росія Росія	17098246
2	Північна Америка	Канада Канада	9976140
3	Північна Америка	США США	9833517
4	Азія	КНР КНР	9596960
5	Південна Америка	Бразилія Бразилія	8511965
6	Австралія	Австралія Австралія	7686850
7	Азія	Індія Індія	3287590
8	Південна Америка	Аргентина Аргентина	2766890
9	Азія	Казахстан Казахстан	2724900
10	Африка	Алжир Алжир	2381740
11	Африка	ДР Конго ДР Конго	2345410
12	Європа	Данія Данія	43094
13	Азія	Саудівська Аравія Саудівська Аравія	2149690
14	Північна Америка	Мексика Мексика	1972550
15	Азія	Індонезія Індонезія	1904556
16	Африка	Судан Судан	1886068
17	Африка	Лівія Лівія	1759540
18	Азія	Іран Іран	1648000
19	Азія	Монголія Монголія	1565000
20	Південна Америка	Перу Перу	1285220
21	Африка	Чад Чад	1284000
22	Африка	Нігер Нігер	1267000
23	Африка	Ангола Ангола	1246700
24	Африка	Малі Малі	1240000
25	Африка	ПАР ПАР	1219912
26	Південна Америка	Колумбія Колумбія	1138910
27	Африка	Ефіопія Ефіопія	1127127
28	Південна Америка	Болівія Болівія	1098580
29	Африка	Мавританія Мавританія	1030700
30	Африка	Єгипет Єгипет	1001450
31	Африка	Танзанія Танзанія	948087
32	Африка	Нігерія Нігерія	923768
33	Південна Америка	Венесуела Венесуела	912050
34	Африка	Намібія Намібія	825418
35	Азія	Пакистан Пакистан	803940
36	Африка	Мозамбік Мозамбік	801590
37	Євразія	Туреччина Туреччина	780580
38	Південна Америка	Чилі Чилі	756950
39	Африка	Замбія Замбія	752614
40	Азія	М'янма М'янма	678500
41	Європа	Франція Франція (метрополія)	547030
42	Азія	Афганістан Афганістан	652230
43	Африка	Сомалі Сомалі	637657
44	Африка	Центральноафриканська Республіка Центральноафриканська Республіка	622984
45	Африка	Південний Судан Південний Судан	619745
46	Європа	Україна Україна	603628
47	Африка	Ботсвана Ботсвана	600370
48	Африка	Мадагаскар Мадагаскар	587040
49	Африка	Кенія Кенія	582650
50	Азія	Ємен Ємен	527970
51	Азія	Таїланд Таїланд	514000
52	Європа	Іспанія Іспанія	504782
53	Азія	Туркменістан Туркменістан	488100
54	Африка	Камерун Камерун	475440
55	Австралія й Океанія	Папуа Нова Гвінея Папуа Нова Гвінея	462840
56	Європа	Швеція Швеція	449964
57	Азія	Узбекистан Узбекистан	447400
58	Африка	Марокко Марокко	446550
59	Азія	Ірак Ірак	437072
60	Південна Америка	Парагвай Парагвай	406750
61	Африка	Зімбабве Зімбабве	390580
62	Азія	Японія Японія	377835
63	Європа	Німеччина Німеччина	357021
64	Африка	Республіка Конго Республіка Конго	342000
65	Європа	Фінляндія Фінляндія	337030
66	Азія	Малайзія Малайзія	329750
67	Азія	В'єтнам В'єтнам	329560
68	Європа	Норвегія Норвегія	324220
69	Африка	Кот-д'Івуар Кот-д'Івуар	322460
70	Європа	Польща Польща	312685
71	Азія	Оман Оман	309500
72	Європа	Італія Італія	301230
73	Азія	Філіппіни Філіппіни	300000
74	Південна Америка	Еквадор Еквадор	283560
75	Африка	Буркіна-Фасо Буркіна-Фасо	274200
76	Австралія й Океанія	Нова Зеландія Нова Зеландія	268680
77	Африка	Габон Габон	267667
78	Європа	Велика Британія Велика Британія (метрополія)	244820
79	Африка	Гвінея Гвінея	245857
80	Африка	Гана Гана	238540
81	Європа	Румунія Румунія	237500
82	Азія	Лаос Лаос	236800
83	Африка	Уганда Уганда	236040
84	Південна Америка	Гаяна Гаяна	214970
85	Європа	Білорусь Білорусь	207600
86	Азія	Киргизстан Киргизстан	198500
87	Африка	Сенегал Сенегал	196190
88	Азія	Сирія Сирія	185180
89	Азія	Камбоджа Камбоджа	181040
90	Південна Америка	Уругвай Уругвай	176220
91	Африка	Туніс Туніс	163610
92	Південна Америка	Суринам Суринам	163270
93	Азія	Бангладеш Бангладеш	144000
94	Азія	Таджикистан Таджикистан	143100
95	Азія	Непал Непал	140800
96	Європа	Греція Греція	131940
97	Північна Америка	Нікарагуа Нікарагуа	129494
98	Африка	Еритрея Еритрея	121320
99	Азія	Північна Корея Північна Корея	120540
100	Африка	Малаві Малаві	118480
101	Африка	Бенін Бенін	112620
102	Північна Америка	Гондурас Гондурас	112090
103	Африка	Ліберія Ліберія	111370
104	Європа	Болгарія Болгарія	110910
105	Північна Америка	Гватемала Гватемала	108890
106	Європа	Ісландія Ісландія	103000
107	Північна Америка	Куба Куба	100860
108	Азія	Південна Корея Південна Корея	98480
109	Європа	Угорщина Угорщина	93030
110	Азія	Йорданія Йорданія	92300
111	Європа	Португалія Португалія	88941
112	Європа	Сербія Сербія	88361
113	Євразія	Азербайджан Азербайджан	86600
114	Європа	Австрія Австрія	83858
115	Азія	ОАЕ ОАЕ	82880
116	Європа	Чехія Чехія	78866
117	Північна Америка	Панама Панама	78200
118	Африка	Сьєрра-Леоне Сьєрра-Леоне	71740
119	Європа	Ірландія Ірландія	70273
120	Європа	Грузія Грузія	69700
121	Азія	Шрі-Ланка Шрі-Ланка	65610
122	Європа	Литва Литва	65200
123	Європа	Латвія Латвія	64589
124	Африка	Того Того	56785
125	Європа	Хорватія Хорватія	56542
126	Європа	Боснія і Герцеговина Боснія і Герцеговина	51129
127	Північна Америка	Коста-Рика Коста-Рика	51100
128	Європа	Словаччина Словаччина	48845
129	Північна Америка	Домініканська Республіка Домініканська Республіка	48730
130	Азія	Бутан Бутан	47000
131	Європа	Естонія Естонія	45226
132	Європа	Нідерланди Нідерланди (метрополія)	41526
133	Європа	Швейцарія Швейцарія	41290
134	Азія	Китайська Республіка Китайська Республіка (Тайвань, Пенху, Цзіньмень, Мацзу)	36197
135	Африка	Гвінея-Бісау Гвінея-Бісау	36120
136	Європа	Молдова Молдова	33843
137	Європа	Бельгія Бельгія	32545
138	Африка	Лесото Лесото	30355
139	Азія	Вірменія Вірменія	29800
140	Європа	Албанія Албанія	28748
141	Австралія й Океанія	Соломонові Острови Соломонові Острови	28450
142	Африка	Екваторіальна Гвінея Екваторіальна Гвінея	28051
143	Африка	Бурунді Бурунді	27830
144	Північна Америка	Гаїті Гаїті	27750
145	Африка	Руанда Руанда	26338
146	Європа	Північна Македонія Північна Македонія	25333
147	Північна Америка	Беліз Беліз	22966
148	Африка	Джибуті Джибуті	22000
149	Північна Америка	Сальвадор Сальвадор	21040
150	Азія	Ізраїль Ізраїль	20770
"""

# Перетворення даних у список словників
country_areas = []

# Розділення даних на рядки
for line in country_areas_data.strip().split('\n'):
    # Використання регулярних виразів для розділення рядків
    parts = re.split(r'\t+', line)
    if len(parts) < 4:
        continue  # Пропуск рядків з недостатньою кількістю стовпців
    index = parts[0]
    continent = parts[1]
    country = parts[2]
    area_str = parts[3].replace(',', '').replace('.', '').replace(' ', '').replace('-', '').replace('_', '')
    try:
        area = float(area_str)
    except ValueError:
        area = np.nan  # Встановлення NaN для некоректних значень
    country_areas.append({
        'Index': int(index),
        'Continent': continent,
        'Country': country,
        'Area': area
    })

# Створення DataFrame
df_areas = pd.DataFrame(country_areas)

# Видалення рядків з некоректними даними
df_areas = df_areas.dropna(subset=['Area'])


# 2. Перевірка Закону Бенфорда на Даних Про Площу Країн

def extract_first_digit(number):
    """
    Витягує першу цифру з числа.

    Parameters:
        number (float): Число, з якого потрібно витягти першу цифру.

    Returns:
        int: Перша цифра числа.
    """
    number = abs(number)  # Врахування лише додатніх чисел
    first_digit = int(str(int(number))[0])
    return first_digit


# Застосування функції до колонки 'Area'
df_areas['First_Digit'] = df_areas['Area'].apply(extract_first_digit)

# Розрахунок частоти першої цифри
first_digit_counts = df_areas['First_Digit'].value_counts().sort_index()

# Розрахунок відсоткової частоти
first_digit_percent = first_digit_counts / first_digit_counts.sum() * 100

# Відображення результатів
print("Частота першої цифри в даних про площу країн:")
print(first_digit_percent)


def benford_probability(d):
    """
    Розраховує ймовірність першої цифри згідно з Законом Бенфорда.

    Parameters:
        d (int): Перша цифра (1-9).

    Returns:
        float: Ймовірність першої цифри.
    """
    return math.log10(1 + 1 / d) * 100  # Відсотковий вираз


# Створення Series з очікуваними ймовірностями
benford_probs = pd.Series({d: benford_probability(d) for d in range(1, 10)})

# Об'єднання реальних та очікуваних частот
comparison_df = pd.DataFrame({
    'Actual': first_digit_percent,
    'Benford': benford_probs
})

# Відображення таблиці порівняння
print("\nПорівняння реальних та очікуваних частот першої цифри:")
print(comparison_df)


def plot_benford_comparison(comparison_df, title):
    """
    Побудова графіку порівняння реальних та очікуваних частот першої цифри.

    Parameters:
        comparison_df (DataFrame): DataFrame з колонками 'Actual' та 'Benford'.
        title (str): Заголовок графіку.
    """
    plt.figure(figsize=(14, 10))
    index = np.arange(1, 10)
    bar_width = 0.35
    opacity = 0.8

    plt.bar(index, comparison_df['Actual'], bar_width,
            alpha=opacity, color='skyblue',
            label='Actual', edgecolor='black')

    plt.bar(index + bar_width, comparison_df['Benford'], bar_width,
            alpha=opacity, color='salmon',
            label='Benford', edgecolor='black')

    plt.xlabel('Перша цифра', fontsize=16)
    plt.ylabel('Відсоток (%)', fontsize=16)
    plt.title(title, fontsize=20)
    plt.xticks(index + bar_width / 2, index, fontsize=14)
    plt.legend(fontsize=14)

    # Додавання текстових міток
    for i in index:
        plt.text(i - bar_width / 2, comparison_df.loc[i, 'Actual'] + 0.5, f"{comparison_df.loc[i, 'Actual']:.2f}%",
                 ha='center', fontsize=12)
        plt.text(i + bar_width / 2, comparison_df.loc[i, 'Benford'] + 0.5, f"{comparison_df.loc[i, 'Benford']:.2f}%",
                 ha='center', fontsize=12)

    plt.tight_layout()
    plt.show()


# Виклик функції для візуалізації
plot_benford_comparison(comparison_df, 'Порівняння Закону Бенфорда з Даними про Площу Країн')


# 3. Генерація Випадкових Шестизначних Чисел за Розподілами Бернуллі та Пуассона

def generate_bernoulli_numbers(n, digits=6, p=0.5):
    """
    Генерує n шестизначних чисел за розподілом Бернуллі.

    Parameters:
        n (int): Кількість чисел для генерації.
        digits (int): Кількість цифр у кожному числі.
        p (float): Ймовірність успіху для кожного Бернуллі-випадку.

    Returns:
        list: Список згенерованих шестизначних чисел.
    """
    numbers = []
    for _ in tqdm(range(n), desc="Генерація чисел за розподілом Бернуллі"):
        # Генерація кожної цифри окремо за Бернуллі (0 або 1)
        digits_list = np.random.binomial(1, p, digits)
        # Перетворення бінарних цифр у число
        number = int(''.join(map(str, digits_list)))
        # Забезпечення шестизначності за допомогою заповнення нулями
        number_str = f"{number:06d}"
        numbers.append(int(number_str))
    return numbers


def generate_poisson_numbers(n, lambda_poisson=500000, min_digits=100000, max_digits=999999):
    """
    Генерує n шестизначних чисел за розподілом Пуассона.

    Parameters:
        n (int): Кількість чисел для генерації.
        lambda_poisson (float): Параметр λ для розподілу Пуассона.
        min_digits (int): Мінімальне шестизначне число.
        max_digits (int): Максимальне шестизначне число.

    Returns:
        list: Список згенерованих шестизначних чисел.
    """
    numbers = []
    while len(numbers) < n:
        # Генерація числа за розподілом Пуассона
        number = np.random.poisson(lam=lambda_poisson)
        # Перевірка, чи число шестизначне
        if min_digits <= number <= max_digits:
            numbers.append(int(number))
    return numbers[:n]  # Забезпечення точної кількості чисел


def get_first_digits(numbers):
    """
    Витягує першу цифру з кожного числа в списку.

    Parameters:
        numbers (list): Список чисел.

    Returns:
        list: Список перших цифр.
    """
    first_digits = [int(str(number)[0]) for number in numbers if number > 0]
    return first_digits


def benford_test(numbers, title):
    """
    Перевіряє Закон Бенфорда на заданих числах та візуалізує результати.

    Parameters:
        numbers (list): Список чисел для перевірки.
        title (str): Заголовок графіку.
    """
    # Витяг першої цифри
    first_digits = get_first_digits(numbers)

    # Розрахунок частоти першої цифри
    digit_counts = pd.Series(first_digits).value_counts().sort_index()

    # Переконаємося, що всі цифри від 1 до 9 присутні
    for d in range(1, 10):
        if d not in digit_counts:
            digit_counts[d] = 0

    digit_counts = digit_counts.sort_index()

    # Розрахунок відсоткової частоти
    digit_percent = digit_counts / digit_counts.sum() * 100

    # Розрахунок очікуваних частот за Законом Бенфорда
    benford_probs = pd.Series({d: benford_probability(d) for d in range(1, 10)})

    # Створення DataFrame для порівняння
    comparison_df = pd.DataFrame({
        'Actual': digit_percent,
        'Benford': benford_probs
    })

    # Відображення таблиці порівняння
    print(f"\nПорівняння реальних та очікуваних частот першої цифри для: {title}")
    print(comparison_df)

    # Візуалізація результатів
    plot_benford_comparison(comparison_df, title)


def plot_benford_comparison(comparison_df, title):
    """
    Побудова графіку порівняння реальних та очікуваних частот першої цифри.

    Parameters:
        comparison_df (DataFrame): DataFrame з колонками 'Actual' та 'Benford'.
        title (str): Заголовок графіку.
    """
    plt.figure(figsize=(14, 10))
    index = np.arange(1, 10)
    bar_width = 0.35
    opacity = 0.8

    plt.bar(index, comparison_df['Actual'], bar_width,
            alpha=opacity, color='skyblue',
            label='Actual', edgecolor='black')

    plt.bar(index + bar_width, comparison_df['Benford'], bar_width,
            alpha=opacity, color='salmon',
            label='Benford', edgecolor='black')

    plt.xlabel('Перша цифра', fontsize=16)
    plt.ylabel('Відсоток (%)', fontsize=16)
    plt.title(title, fontsize=20)
    plt.xticks(index + bar_width / 2, index, fontsize=14)
    plt.legend(fontsize=14)

    # Додавання текстових міток
    for i in index:
        plt.text(i - bar_width / 2, comparison_df.loc[i, 'Actual'] + 0.5, f"{comparison_df.loc[i, 'Actual']:.2f}%",
                 ha='center', fontsize=12)
        plt.text(i + bar_width / 2, comparison_df.loc[i, 'Benford'] + 0.5, f"{comparison_df.loc[i, 'Benford']:.2f}%",
                 ha='center', fontsize=12)

    plt.tight_layout()
    plt.show()


# Функція для розрахунку ймовірності Бенфорда
def benford_probability(d):
    """
    Розраховує ймовірність першої цифри згідно з Законом Бенфорда.

    Parameters:
        d (int): Перша цифра (1-9).

    Returns:
        float: Ймовірність першої цифри.
    """
    return math.log10(1 + 1 / d) * 100  # Відсотковий вираз


# 4. Перевірка Закону Бенфорда на Даних Про Площу Країн Світу
print("Перевірка Закону Бенфорда на даних про площу країн світу:")
benford_test(df_areas['Area'].tolist(), 'Benford\'s Law vs Actual Data (Country Areas)')

# 5. Генерація 10,000 Шестизначних Чисел за Розподілом Бернуллі
print("\nГенерація 10,000 шестизначних чисел за розподілом Бернуллі:")
bernoulli_numbers = generate_bernoulli_numbers(10000, digits=6, p=0.5)
benford_test(bernoulli_numbers, 'Benford\'s Law vs Bernoulli Distribution')

# 6. Генерація 10,000 Шестизначних Чисел за Розподілом Пуассона
print("\nГенерація 10,000 шестизначних чисел за розподілом Пуассона:")
poisson_numbers = generate_poisson_numbers(10000, lambda_poisson=500000)
benford_test(poisson_numbers, 'Benford\'s Law vs Poisson Distribution')
